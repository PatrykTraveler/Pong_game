-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on Github at
--   <a>https://github.com/githubuser/pong#readme</a>
@package pong
@version 0.1.0.0

module Types
data PongGame
Game :: (Float, Float) -> (Float, Float) -> Float -> Float -> !Bool -> !Bool -> !Int -> PongGame

-- | Stores ball position
[ballLoc] :: PongGame -> (Float, Float)

-- | Stores ball velocity vector
[ballVel] :: PongGame -> (Float, Float)

-- | Stores player 1 Y - position
[player1] :: PongGame -> Float

-- | Stores player 2 Y - position
[player2] :: PongGame -> Float

-- | Stores boolean value that stores if up-button is pressed
[stateUpClick] :: PongGame -> !Bool

-- | Stores boolean value that stores if down-button is pressed
[stateDownClick] :: PongGame -> !Bool

-- | Seed used to randomize ball position
[seed] :: PongGame -> !Int

-- | Stores width of game field
width :: Int

-- | Stores height of game field
height :: Int

-- | Stores width of the paddle
playerWidth :: Int

-- | Stores height of the paddle
playerHeight :: Int

-- | Stores the move offset that tells how far the paddle moves during time
--   between frames
moveOffset :: Int

-- | Stores the number of frames per second
fps :: Int
instance GHC.Show.Show Types.PongGame


-- | Main game module
module Lib

-- | Function that sets game seed
updateSeed :: PongGame -> PongGame

-- | Game window declaration, uses values of <a>width</a> and <a>height</a>
--   from <tt>Types</tt> module
window :: Display

-- | Sets the background color
background :: Color

-- | Renders current view of the game
render :: PongGame -> Picture

-- | Sets the game to starting values
initialState :: PongGame

-- | Function that draws the ball during the game
moveBall :: Float -> PongGame -> PongGame

-- | Type used to store ball radius
type Radius = Float

-- | Type used to store position
type Position = (Float, Float)

-- | Function that checks if ball collides with wall
wallCollision :: Position -> Radius -> Bool

-- | Function that checks if ball collides with paddle
paddleCollision :: Position -> Float -> Float -> Radius -> Bool

-- | Function that switches the ball direction after collision
ballBounce :: PongGame -> PongGame

-- | Function that gets player move
playerMovement :: PongGame -> Int -> PongGame

-- | Function that calculate computer move
computerMovement :: PongGame -> PongGame

-- | Function that moves player
movePlayer :: PongGame -> PongGame

-- | Function that resets ball position after collision with right or left
--   wall
resetBall :: PongGame -> PongGame

-- | Function that updates view
update :: Float -> PongGame -> PongGame

-- | Function that takes player's input
handleKeys :: Event -> PongGame -> PongGame

-- | Function that runs the game
doPong :: IO ()
