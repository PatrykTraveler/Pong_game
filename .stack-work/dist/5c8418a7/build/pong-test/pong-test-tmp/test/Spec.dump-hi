
==================== FINAL INTERFACE ====================
2018-01-25 17:36:25.7999034 UTC

interface main:Main 8022
  interface hash: c018bb6f940c60a55728b54d87e29195
  ABI hash: 2c72144f698d65bfa2de4841925f86ba
  export-list hash: f9b9ce89388ce241be590f3814841cdb
  orphan hash: 06481f33e7ce096cf74829c9bbe7c0a6
  flag hash: 8c3d2d0f575d0903d96f8f29f5e8314e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: GLURaw-2.0.0.3 GLUT-2.7.0.12
                      ObjectName-1.1.0.1 OpenGL-3.0.2.0 OpenGLRaw-3.2.7.0
                      QuickCheck-2.10.1 StateVar-1.1.0.4 Win32-2.5.4.1 array-0.5.2.0
                      base-4.10.1.0 binary-0.8.5.1 bmp-1.2.6.3 bytestring-0.10.8.2
                      containers-0.5.10.2 deepseq-1.4.3.0 fixed-0.2.1.1 ghc-boot-th-8.2.2
                      ghc-prim-0.5.1.1 gloss-1.11.1.1 gloss-rendering-1.11.1.1
                      half-0.2.2.3 integer-gmp-1.0.1.0 pong-0.1.0.0 pretty-1.1.3.3
                      primitive-0.6.2.0 random-1.1 stm-2.4.4.1 template-haskell-2.12.0.0
                      text-1.2.2.2 tf-random-0.5 time-1.8.0.2 transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1:Control.Monad.STM text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0:Control.Monad.Primitive
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text
import  -/  QuickCheck-2.10.1:Test.QuickCheck 016311e8a3bf51421c87b19c827e7c11
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Test d466c842c8e25c792597c5c4ac992c2c
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  pong-0.1.0.0:Lib aef13b4ccaf145e0be5b31aaf6b61343
import  -/  pong-0.1.0.0:Types 5190f2d1d8e679db9125cca16245aa37
760c30453a958c61e7a2169922750826
  $s$fShow(,) :: GHC.Show.Show (GHC.Types.Float, GHC.Types.Float)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Float, GHC.Types.Float)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Float.$fShowFloat
                     GHC.Float.$fShowFloat)
                  (\ (x :: (GHC.Types.Float, GHC.Types.Float)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Float
                     @ GHC.Types.Float
                     GHC.Float.$fShowFloat
                     GHC.Float.$fShowFloat
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(GHC.Types.Float, GHC.Types.Float)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Float, GHC.Types.Float)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Types.Float
                        @ GHC.Types.Float
                        GHC.Float.$fShowFloat
                        GHC.Float.$fShowFloat
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
a4aa926d01adf2c2da147dc8e2c60070
  $s$fTestable(->)3 ::
    (GHC.Types.Float -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Float -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
65e59c6f94f70de40496c0971c7f88e6
  $w$dTestable ::
    (GHC.Types.Float -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Float -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ GHC.Types.Float
                   @ GHC.Types.Bool
                   GHC.Float.$fShowFloat
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Float>_R
                                             ->_R <GHC.Show.Show GHC.Types.Float>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <GHC.Types.Float -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Float>_R
                                             ->_R <GHC.Show.Show GHC.Types.Float>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Float -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Test.QuickCheck.Arbitrary.$fArbitraryFixed_$sarbitrarySizedFractional
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Float>_R))
                   Test.QuickCheck.Arbitrary.shrinkRealFrac_$sshrinkRealFrac
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
6273aa2d94f5e3a28656a29b4869dd7a
  $wlvl2 ::
    GHC.Prim.Float#
    -> GHC.Types.Float -> [(GHC.Types.Float, GHC.Types.Float)]
  {- Arity: 2, Strictness: <S,U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#) (ww1 :: GHC.Types.Float) ->
                 let {
                   z :: [(GHC.Types.Float, GHC.Types.Float)]
                   = case ww1 of ww2 { GHC.Types.F# ww3 ->
                     let {
                       ww4 :: GHC.Types.Float = GHC.Types.F# ww
                     } in
                     letrec {
                       go :: [GHC.Types.Float] -> [(GHC.Types.Float, GHC.Types.Float)]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds :: [GHC.Types.Float]) ->
                         case ds of wild {
                           [] -> GHC.Types.[] @ (GHC.Types.Float, GHC.Types.Float)
                           : y ys
                           -> GHC.Types.:
                                @ (GHC.Types.Float, GHC.Types.Float)
                                (ww4, y)
                                (go ys) }
                     } in
                     go (Test.QuickCheck.Arbitrary.$w$sshrinkRealFrac3 ww3) }
                 } in
                 letrec {
                   go :: [GHC.Types.Float] -> [(GHC.Types.Float, GHC.Types.Float)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Types.Float]) ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> GHC.Types.:
                            @ (GHC.Types.Float, GHC.Types.Float)
                            (y, ww1)
                            (go ys) }
                 } in
                 go (Test.QuickCheck.Arbitrary.$w$sshrinkRealFrac3 ww)) -}
bf218301ca1b36055c7a4ecd5bf5b50a
  $wlvl3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# GHC.Types.Float, GHC.Types.Float #)
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# Test.QuickCheck.Arbitrary.$fArbitraryFixed_$sarbitrarySizedFractional
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w,
                    Test.QuickCheck.Arbitrary.$fArbitraryFixed_$sarbitrarySizedFractional
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w #) } } }) -}
8454b4d9f0bae1807ff9eb588f629d78
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1cb2ef9b8558f513576bf9866a752aee
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ (Lib.Position -> Lib.Radius -> GHC.Types.Bool)
                        Main.main2
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (GHC.Types.Float, GHC.Types.Float)>_R
                                             ->_R <GHC.Show.Show
                                                     (GHC.Types.Float, GHC.Types.Float)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Lib.Radius -> GHC.Types.Bool)>_R
                                             ->_R <(GHC.Types.Float, GHC.Types.Float)
                                                   -> Lib.Radius -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (GHC.Types.Float, GHC.Types.Float)>_R
                                             ->_R <GHC.Show.Show
                                                     (GHC.Types.Float, GHC.Types.Float)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Lib.Radius -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <(GHC.Types.Float, GHC.Types.Float)
                                                            -> Lib.Radius -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Lib.wallCollision
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
03d66be6885bdb4a34842c5e74f08345
  main2 ::
    ((GHC.Types.Float, GHC.Types.Float)
     -> Lib.Radius -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: (GHC.Types.Float, GHC.Types.Float)
                         -> Lib.Radius -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ (GHC.Types.Float, GHC.Types.Float)
                   @ (Lib.Radius -> GHC.Types.Bool)
                   Main.$s$fShow(,)
                   Main.$s$fTestable(->)3
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Float>_R
                                             ->_R <GHC.Show.Show GHC.Types.Float>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <GHC.Types.Float -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary GHC.Types.Float>_R
                                             ->_R <GHC.Show.Show GHC.Types.Float>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <GHC.Types.Float
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (GHC.Types.Float, GHC.Types.Float)>_R
                                             ->_R <GHC.Show.Show
                                                     (GHC.Types.Float, GHC.Types.Float)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Lib.Radius -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <(GHC.Types.Float, GHC.Types.Float)
                                                       -> Lib.Radius -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                (GHC.Types.Float, GHC.Types.Float)>_R
                                             ->_R <GHC.Show.Show
                                                     (GHC.Types.Float, GHC.Types.Float)>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (Lib.Radius -> GHC.Types.Bool)>_R
                                             ->_R <(GHC.Types.Float, GHC.Types.Float)
                                                   -> Lib.Radius -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   Main.main4
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <(GHC.Types.Float, GHC.Types.Float)>_R))
                   Main.main3
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
941d6074326ad32d89c42545e6849ac7
  main3 ::
    (GHC.Types.Float, GHC.Types.Float)
    -> [(GHC.Types.Float, GHC.Types.Float)]
  {- Arity: 1, Strictness: <S(S(S)L),1*U(1*U(U),U(U))>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 -> Main.$wlvl2 ww4 ww2 } }) -}
cc3314ecbd8d4fa0e2538b04b3ca7764
  main4 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> (GHC.Types.Float, GHC.Types.Float)
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Main.$wlvl3 ww1 ww2 ww3 ww4 w1 of ww7 { (#,#) ww8 ww9 ->
                 (ww8, ww9) } }) -}
50d4794ea6302616bffa46760912f791
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fShow(,) @ Float @ Float" [orphan] forall (v1 :: GHC.Show.Show
                                                               GHC.Types.Float)
                                                      (v :: GHC.Show.Show GHC.Types.Float)
  GHC.Show.$fShow(,) @ GHC.Types.Float @ GHC.Types.Float v v1
  = Main.$s$fShow(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

